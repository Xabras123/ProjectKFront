{"remainingRequest":"/home/alepopo/Documents/AleDox/Trabajo/Front/Vue.js/projectk/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/alepopo/Documents/AleDox/Trabajo/Front/Vue.js/projectk/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/alepopo/Documents/AleDox/Trabajo/Front/Vue.js/projectk/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alepopo/Documents/AleDox/Trabajo/Front/Vue.js/projectk/src/views/Movies.vue?vue&type=template&id=9d6b3f06&","dependencies":[{"path":"/home/alepopo/Documents/AleDox/Trabajo/Front/Vue.js/projectk/src/views/Movies.vue","mtime":1612363402997},{"path":"/home/alepopo/Documents/AleDox/Trabajo/Front/Vue.js/projectk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alepopo/Documents/AleDox/Trabajo/Front/Vue.js/projectk/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/alepopo/Documents/AleDox/Trabajo/Front/Vue.js/projectk/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alepopo/Documents/AleDox/Trabajo/Front/Vue.js/projectk/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}